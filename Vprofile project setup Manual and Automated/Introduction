# V Profile Project – Local Multi-Tier Web Application Stack Setup

## Introduction  
The **V Profile Project** is a local multi-tier web application stack setup that helps you learn how to build, automate, and troubleshoot real-world environments.  

## Why This Project?  
- Establishes a **baseline** for upcoming projects (containerization, Kubernetes, CI/CD, etc.).  
- Provides a **local lab** for safe R&D without touching production servers.  

## Real-World Scenario  
In real projects, multiple services like databases (MySQL/PostgreSQL), application servers (Tomcat/JBoss), and web servers (Nginx/Apache) work together. Instead of experimenting on real servers, we replicate the same stack locally using VMs.  

## Challenges with Manual Setup  
- Time-consuming  
- Complex and error-prone  
- Not easily repeatable  

## Solution: Automated Setup  
Using **Infrastructure as Code (IaC)** with Vagrant, VirtualBox, and provisioning scripts, the setup becomes **consistent, repeatable, and fully automated**.  

## Tools Required  
- **Oracle VirtualBox** → Hypervisor for VMs  
- **Vagrant** → VM automation  
- **Git Bash** → CLI & version control  
- **IDE/Editor** → VS Code, Sublime, Notepad++, etc.  

## Stack Architecture  
- **Nginx** → Load balancer  
- **Tomcat** → Java web application server  
- **MySQL** → Database service  
- **RabbitMQ** → Message broker  
- **Memcached** → Cache layer  

**Flow:**  
User → Nginx → Tomcat → Memcached/MySQL → RabbitMQ  

## Execution Flow  
1. Install prerequisites (VirtualBox, Vagrant, Git Bash, IDE).  
2. Clone the repository.  
3. Navigate to the Vagrant directory.  
4. Run `vagrant up` to create and configure VMs.  
5. Services start in order: MySQL → Memcached → RabbitMQ → Tomcat → Nginx.  
6. Build & deploy the Java application.  
7. Access the app in browser using the VM IP.  

## Key Takeaways  
- Learn **VM automation** locally with Vagrant.  
- Gain **hands-on with multi-tier architecture**.  
- Build a **repeatable environment** for DevOps practice.  
- Improve **troubleshooting skills** by understanding service flow.  

